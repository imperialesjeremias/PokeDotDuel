version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pokedotduel-postgres-prod
    environment:
      POSTGRES_DB: pokedotduel
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d pokedotduel"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pokedotduel
    restart: unless-stopped

  # Backend API (Production)
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: pokedotduel-backend-prod
    environment:
      - NODE_ENV=production
      - PORT=3001
      - CORS_ORIGIN=${FRONTEND_URL}
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pokedotduel
    restart: unless-stopped

  # Frontend (Production)
  frontend:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: pokedotduel-frontend-prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_URL}
      - NEXT_PUBLIC_WS_URL=${WS_URL}
      - NEXT_PUBLIC_FRONTEND_URL=${FRONTEND_URL}
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - pokedotduel
    restart: unless-stopped

  # Redis for caching (Production)
  redis:
    image: redis:7-alpine
    container_name: pokedotduel-redis-prod
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - pokedotduel
    restart: unless-stopped

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: pokedotduel-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - pokedotduel
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  pokedotduel:
    driver: bridge
